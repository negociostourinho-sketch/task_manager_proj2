generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  name       String
  email      String      @unique
  password   String
  role       String      @default("OPERATOR")
  tasks      Task[]      @relation("UserTasks")
  messages   Message[]   @relation("UserMessages")
  timeSheets TimeSheet[] @relation("UserTimeSheets")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Project {
  id          String      @id @default(cuid())
  type        String
  name        String
  description String?
  value       Float?
  tasks       Task[]      @relation("ProjectTasks")
  checklists  Checklist[] @relation("ProjectChecklists")
  messages    Message[]   @relation("ProjectMessages")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Task {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      String      @default("PENDING")
  dueDate     DateTime?
  userId      String?
  user        User?       @relation("UserTasks", fields: [userId], references: [id])
  projectId   String?
  project     Project?    @relation("ProjectTasks", fields: [projectId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  timesheets  TimeSheet[] @relation("TaskTimeSheets")
}

model Checklist {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("PENDING")
  dueDate     DateTime?
  projectId   String?
  project     Project?  @relation("ProjectChecklists", fields: [projectId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id          String       @id @default(cuid())
  subject     String?
  body        String
  senderId    String
  sender      User         @relation("UserMessages", fields: [senderId], references: [id])
  projectId   String?
  project     Project?     @relation("ProjectMessages", fields: [projectId], references: [id])
  createdAt   DateTime     @default(now())
  attachments Attachment[] @relation("MessageAttachments")
}

model Attachment {
  id         String   @id @default(cuid())
  url        String
  name       String
  accessType String   @default("public")
  messageId  String?
  message    Message? @relation("MessageAttachments", fields: [messageId], references: [id])
}

model TimeSheet {
  id        String    @id @default(cuid())
  taskId    String
  task      Task      @relation("TaskTimeSheets", fields: [taskId], references: [id])
  userId    String
  user      User      @relation("UserTimeSheets", fields: [userId], references: [id])
  startTime DateTime
  endTime   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}